AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS Template for creating cognito user pool
  
Parameters:
  UserPoolName:
    Type: String
    Description: Name of the user pool create
  AppClientName:
    Type: String
    Description: Name of the app client to create
  SubDomainName:
    Type: String
    Description: Name of the app client to create
  NodeJsZipKey:
    Type: String
    Description: Path to the nodejs.zip file inside the s3 bucket
  CallbackUrls:
    Type: CommaDelimitedList
    Description: The list of CallbackUrls for the ClientApp
  TestUserEmail:
    Type: String
    Description: Email of the test user to create
  TestUserName:
    Type: String
    Description: Name of the test user to create
  TestUserTempPassword:
    Type: String
    Description: Temp password of the test user to create

Resources:
  EncUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: true
      UserPoolName: !Ref UserPoolName
      UsernameAttributes: 
        - email
      AutoVerifiedAttributes: 
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  AppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: !Ref AppClientName
        GenerateSecret: false
        UserPoolId: !Ref EncUserPool   

  LambdaCognitoExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - "arn:aws:dynamodb:*:*:*"
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource:
                  - "arn:aws:cognito-idp:*:*:*"

  CustomDomainLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: domainCustomCreator
      Code:
        S3Bucket:
          Fn::ImportValue: s3-TemplateBucketName
        S3Key: !Ref NodeJsZipKey
      Handler: index.setupCognitoStack
      Role:
        Fn::GetAtt: 
          - LambdaCognitoExecutionRole
          - Arn
      Runtime: nodejs8.10
      Timeout: 180

  CustomDomainCreator:
    Type: Custom::CustomDomainCreator
    Properties:
      ServiceToken: !GetAtt CustomDomainLambda.Arn
      UserPoolId: !Ref EncUserPool
      DomainName: !Ref SubDomainName
      GenerateRandomIfNotAvailable: !Ref SubDomainName
      CallbackUrls: !Ref CallbackUrls
      AppClientId: !Ref AppClient
      TestUserEmail: !Ref TestUserEmail
      TestUserName: !Ref TestUserName
      TestUserTempPassword: !Ref TestUserTempPassword
      # CertificateArn:
      #   Fn::ImportValue: !Sub ${EnvironmentName}-DNSCertificateARN3
Outputs:
  UserPoolId:
    Value: !Ref EncUserPool
    Description: ID of the created User Pool
  UserPoolProviderName:
    Value: !GetAtt 
          - EncUserPool
          - ProviderName
    Description: Provider Name of the created User Pool
  UserPoolProviderURL:
    Value: !GetAtt 
          - EncUserPool
          - ProviderURL
    Description: Provider URL of the created User Pool
  UserPoolArn:
    Value: !GetAtt 
          - EncUserPool
          - Arn
    Description: Name of the created User Pool
    Export:
      Name: cognito-UserPoolArn
  AppClientId:
    Value: !Ref AppClient
    Description: ID of the created Client App